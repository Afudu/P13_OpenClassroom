name: OC_P13-CI/CD-Pipeline-V1
run-name: ${{ github.actor }} is testing out OC_P13-CI/CD-Pipeline-V1 jobs ðŸš€
env:
    SECRET_KEY: ${{ secrets.SECRET_KEY }}
    ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
    DEBUG: ${{ secrets.DEBUG }}
    DB_NAME: ${{ secrets.DB_NAME }}
    SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

on: [push]

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run linting and formatting checks
      - name: Run Linter
        run: flake8

      # Step 5: Run Django tests
      - name: Run Tests
        run: pytest

  # Job 2: Containerization
  containerize:
    runs-on: ubuntu-latest
    needs: build-and-test  # Only run if build-and-test succeeds.
    if: github.ref == 'refs/heads/master' # Only run this step if the branch is master
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      DEBUG: ${{ secrets.DEBUG }}
      DB_NAME: ${{ secrets.DB_NAME }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build and Tag Docker Image
      - name: Build and Tag Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest

      # Step 4: Push Docker Image
      - name: Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest

  # Job 3: Deploy to Production
  deploy-production:
    needs: containerize # Only run if containerization succeeds.
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' # Only run this step if the branch is master
    steps:
      # Step 1: Deploy to Render Web Srvice
      - name: Deploy to Render
        env:
          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl "$deploy_url"
          
